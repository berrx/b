{"pages":[],"posts":[{"title":"身为一个 PHP 程序员, 你知道 Homstead 吗?","text":"工欲善其事, 必先利其器 作为一个 PHPer, 搭建配置 PHP 开发环境是每一个 PHP 程序员的基本操作, 而我觉得 Homestead 作为 Laravel 框架官方指定的开发环境, 几乎是 PHPer 最好的选择之一. 先期准备 需要禁用 Windows自带的虚拟机, 禁用Hyper-V的命令.(需要重启) 1&gt; bcdedit /set hypervisorlaunchtype off 确保你的电脑主板支持 (VT-x) 功能, 并且需要开启这个功能 (进入BIOS界面开启, 没有开启的可以根据自己的主板型号百度下开启的方法自行开启) 需要预先下载的三个软件 Git Bash Virtualbox Vagrant 全部安装完成后打开 git bash 这个应用, 运行以下生成密钥. 1&gt; ssh-keygen -t rsa -C &quot;berrx@outlook.com&quot; 从 github 上拉取 Homestead 文件. 1&gt; git clone https://github.com/laravel/homestead.git 进入刚刚克隆的文件, 双击 init.sh 文件, 此时目录里生成了几个必要的文件, 我们来配置一下 配置虚拟机 使用编辑器或记事本打开 homestead 目录下的 Homestead.yaml 文件. 我们此时还需要修改配置文件来用于配置我们的虚拟机. 添加自己的密钥, 当你在虚拟机中使用 git 等工具时, 你使用的还是本机电脑的密钥. 123keys: - ~/.ssh/id_rsa - ~/.ssh/id_rsa.pub 修改映射目录, 虚拟机里的目录会同步到你本地, map 为本地 , to 为虚拟机目录 123folders: - map: D:/code to: /home/vagrant/code 配置你的站点地址, map 为站点地址, to 为虚拟机站点目录, type为站点类型, 支持 Thinkphp, symfony, yii等, 具体可以去 \\scripts\\site-types 目录去看一下 1234sites: - map: laravel.test to: /home/vagrant/code/Laravel/public type: laravel 如果你想在虚拟机初始化时添加一些其他应用, 可以先去手册里找一下, 然后添加到下面 123456features: - mysql: true - mariadb: false - postgresql: false - ohmyzsh: false - webdriver: false 修改完配置后, 就可以运行命令创建我们的虚拟机了 1&gt; vagrant up 一般运行完上面的语句会出现下面的这些信息 (随着版本更新内容可能不同), 我们此时主要是要用到信息中的那条链接, 复制这条链接用于本地下载. 12345678Bringing machine 'homestead' up with 'virtualbox' provider...==&gt; homestead: Box 'laravel/homestead' could not be found. Attempting to find and install... homestead: Box Provider: virtualbox homestead: Box Version: &gt;= 11.0.0, &lt; 12.0.0==&gt; homestead: Loading metadata for box 'laravel/homestead' homestead: URL: https://vagrantcloud.com/laravel/homestead==&gt; homestead: Adding box 'laravel/homestead' (v11.1.0) for provider: virtualbox homestead: Downloading: https://vagrantcloud.com/laravel/boxes/homestead/versions/11.1.0/providers/virtualbox.box 本地安装 首先复制命令中的链接到浏览器或下载工具进行下载, 我的链接是这个 (随着版本更新内容可能不同). 1https://vagrantcloud.com/laravel/boxes/homestead/versions/11.1.0/providers/virtualbox.box 下载完成后, box文件的文件名大概是这样: 4c526667-0956-45df-92ff-78ba76cb1148, 然后可以把它重命名为 virtualbox.box. 将下载好的文件, 添加到 vagrant 里面.(将我的目录改为自己的目录) 1vagrant box add laravel/homestead C:/Users/berrx/Downloads/virtualbox.box 找到安装的目录添加一个名为 metadata_url 的文件, 用记事本代开文件, 将这个链接复制到文件里: c:/users/你的用户名/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead 1https://atlas.hashicorp.com/laravel/homestead 目录下有一个 0 文件, 将其改为自己的版本号, 我下载的是 11.1.0 这个版本, 所以我需要将文件名修改为 11.1.0 进入虚拟机 进入你的 homestead 文件夹. 1&gt; cd D:/homestead 运行命令创建虚拟机. 1&gt; vagrant up 耐心等待一段事件之后就可以看到虚拟机创建完成 , 完成后运行命令进入虚拟机命令行操作界面 1&gt; vagrant ssh 虚拟机连接成功后, 就可以进行自己的开发了 1234Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-72-generic x86_64)Last login: Thu Apr 22 15:25:05 2021 from 10.0.2.2 常用命令 关机命令 1&gt; vagrant halt 重启虚拟机 1&gt; vagrant reload 重新加载配置 1&gt; vagrant provision 销毁虚拟机 1&gt; vagrant destroy 使用代理 安装插件 1&gt; vagrant plugin install vagrant-proxyconf 在homestead目录下的 Vagrantfile 文件中添加如下代码, 将端口修改为自己的代理端口. 12345if Vagrant.has_plugin?(&quot;vagrant-proxyconf&quot;) config.proxy.http = &quot;http://10.0.2.2:1080/&quot; config.proxy.https = &quot;http://10.0.2.2:1080/&quot; config.proxy.no_proxy = &quot;localhost,127.0.0.1,.example.com&quot;end 运行命令后 123&gt; vagrant provision #应用配置&gt; vagrant reload # 重启 结语 其实我觉得 homestead 最大的缺点就是在于他的安装十分复杂, 而且由于咱们的网络环境不是太好, 有可能因为各种原因导致失败. 这对于一个动辄需要几个小时安装环境的人是一个不小的考验, 但装完成后你会发现 Homestead 的功能是那么的强大, 最终你会觉得一切都是值得的! 最后如果你有无法解决的问题的话, 我给你推荐一个网站, 该站是 Laravel 的一个学习网站, 我许多知识都是从这个网站学到的, 如果你有不太懂的问题也可以从这个网站上面提问. laravel china","link":"/%E5%AE%89%E8%A3%85homestead%E6%95%99%E7%A8%8B/"},{"title":"在Ubuntu服务器上搭建php环境","text":"操作系统 ： Ubuntu Server 20.04 LTS 64bit 安装版本 : php8.0 + nginx/1.18.0 (Ubuntu) PHP 新增 ondrej源 123$ sudo add-apt-repository ppa:ondrej/php$ sudo apt-get update 安装 php8.0 1$ sudo apt install php8.0 -y 查看已安装扩展 1$ php -m 安装需要的扩展 FastCGI 进程管理器（FPM） 1$ sudo apt install php8.0-fpm -y NGINX 安装Nginx 1$ sudo apt install nginx -y 查看 Nginx 是否启动成功 123456789101112131415161718$ sudo systemctl status nginx● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2021-09-21 09:00:54 CST; 10s ago Docs: man:nginx(8) Process: 16559 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS) Process: 16571 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)Main PID: 16572 (nginx) Tasks: 2 (limit: 2270) Memory: 2.6M CGroup: /system.slice/nginx.service ├─16572 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; └─16573 nginx: worker processSep 21 09:00:54 VM-8-3-ubuntu systemd[1]: Starting A high performance web server and a reverse proxy server...Sep 21 09:00:54 VM-8-3-ubuntu systemd[1]: Started A high performance web server and a reverse proxy server. 创建一个新的站点 找到 php-fpm 进程服务扩展配置文件, 在此文件里可以得到有关接收FastCGI请求的地址 1$ vim /etc/php/8.0/fpm/pool.d/www.conf /etc/php/8.0/fpm/pool.d/www.conf 1234...listen = /run/php/php8.0-fpm.sock 创建一个网站目录 1$ sudo mkdir -p /var/www/example.com/public 给网站目录配置相应的权限 1$ sudo chown -R $USER:$USER /var/www/example.com/public 在网站根目录下增加一个入口文件 1$ sudo vim /var/www/example.com/public/index.php 在其中, 添加以下示例php： /var/www/example.com/public/index.php 12&lt;?php phpinfo(); 接下来我们为 Nginx 来创建一个服务器块. 与直接修改默认配置文件不同, 我们在以下位置创建一个新文件: 1sudo vim /etc/nginx/sites-available/example.com 粘贴到以下内容添加到文件中. /etc/nginx/sites-available/example.com 12345678910111213141516171819server { listen 81; listen [::]:81; server_name example.com; root /var/www/example.com/public; index index.html index.htm index.php; location / { try_files $uri $uri/ /index.php$is_args$args; } location ~ \\.php$ { try_files $uri =404; include fastcgi.conf; fastcgi_pass unix:/run/php/php8.0-fpm.sock; }} 在这里我使用了 81 端口的原因是因为在同目录下的 default 文件有一个默认配置块, 这里我们为了减少操作流程直接使用81端口. 接下来, 让我们通过在sites-enabled目录新建一个链接, 好让 Nginx 在启动过程中会读取这个目录: 1$ sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/ 为避免可能由于添加其他服务器名称而引起的哈希存储区内存问题, 有必要调整/etc/nginx/nginx.conf文件中的单个值. 1$ sudo vim /etc/nginx/nginx.conf 找到 server_names_hash_bucket_size 指令并删除#符号： /etc/nginx/nginx.conf 1234...server_names_hash_bucket_size 64; 接下来，测试以确保我们在 Nginx 文件中的改动，没有任何问题： 1$ sudo nginx -t 确认没有问题之后就可以重启我们的 nginx 载入新加入的配置 1$ sudo systemctl restart nginx 最后访问我们的 http://localhost:81 就应该能看到 phpinfo() 输出的页面了","link":"/%E5%9C%A8Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAphp%E7%8E%AF%E5%A2%83/"}],"tags":[{"name":"Homstead","slug":"Homstead","link":"/tags/Homstead/"},{"name":"php","slug":"php","link":"/tags/php/"}],"categories":[{"name":"developer","slug":"developer","link":"/categories/developer/"},{"name":"php","slug":"php","link":"/categories/php/"}]}